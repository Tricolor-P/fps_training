・最小構成
ゲームの操作と記録を行えるようにする
→最初はマルチプロセストとか考えずやってみよう


・必要タスク
レコーダークラスの作成
　　フレームにタグ付きで情報投げる
　　フレームをレコードに追加する
ゲームドライバーにタスクを追加
　　ゲーム情報の取得


・現在のタスク

・終了したタスク
ゲームモード設定を行うためのコマンドを生成するクラスを作成する
ゲームドライバーにタスクを追加
　　ゲームへの操作　　


目的
このソフトウェアは、人と同程度のプレイスキルを持つAIエージェント作成することを目的とする
AIエージェント作成のためには、ゲームから情報を取得すること、ゲームを操作することが必要である
・GameDriverクラス：ゲームの起動、およびゲーム情報の取得、およびゲームへの操作を行う
　　ゲームの起動、終了
　　ゲームウィンドウのアクティベート
　　ゲームへのキー操作→この辺を次に作るよ
　　ゲームへのマウス操作
　　ゲーム情報（スクショ）の取得
　　ゲーム情報（標準出力）の取得

ゲームドライバー→（ゲーム情報）→コマンダー→（コマンド）→ゲームドライバー
ゲームドライバー→（ゲーム情報）→コマンダー→（コマンド）→ゲームドライバー


ゲームから取得した情報を元に、ゲームへの操作を生成するエージェンが必要である
・Agentクラス：学習済みモデルのロード、AIエージェントによる操作生成

エージェントを訓練するトレーニングクラスが必要である
・Trainingクラス：モデルのインポート、モデルのエクスポート、モデルの訓練、トレーニングデータの読み込み

エージェントによる操作は、マルチプロセスで行う、そのため、マルチプロセスのfpsコントローラが必要である
・マルチプロセスサイクルコントローラ：  １フレームの時間指定、使うコア数、
                                        行う処理の指定、コールバック処理の指定、
                                        処理の開始、終了
メインからそのままゲームドライバーによるゲームへの操作→シングルスレッド操作
メインからマルチプロセスサイクルコントローラを通してゲームドライバーを起動することでマルチプロセス化したゲームアクセスを実現する

ゲーム記録は、１００回毎などのサイクルで再起動する必要がある


・ゲームの起動設定をJSONに記述する


test_manager　テスト記述
・Jsonファイルのから設定を読み込む

・周期処理をマルチプロセスで行うクラスを作成する

１．マルチプロセス周期クラスの作成をnotebookで行うよ


